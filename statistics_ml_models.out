Printing version info for help reporting bugs
Python version: 3.8.12 | packaged by conda-forge | (default, Sep 29 2021, 19:50:30) 
[GCC 9.4.0]

Mean absolue error in kJ/mol
Mean                                6.38
Median                              6.47
LR                            616854922285.68
KRR                                 4.82
BR                                  4.10
KNN                                 2.66
RF                                  3.67
PLS PF                              3.13
GPR M 1.5 no scaler                 6.38

Coefficient of determination (R2)
Mean                               -0.01
Median                             -0.90
LR                            -1727447654187915756437504.00
KRR                                -0.00
BR                                  0.37
KNN                                 0.25
RF                                  0.49
PLS PF                              0.49
GPR M 1.5 no scaler                -0.01

Root-mean squared error (RMSE) in kJ/mol
Mean                                6.54
Median                              8.97
LR                            6875600958205.84
KRR                                 6.51
BR                                  5.16
KNN                                 5.64
RF                                  4.66
PLS PF                              4.65
GPR M 1.5 no scaler                 6.54

Variations of each model from which the minimum deviation has been chosen in each case:

Start run for:  LinearRegression()

Start run for:  KernelRidge(alpha=0.001, gamma=3.125e-08, kernel='rbf')
Start run for:  KernelRidge(alpha=0.1, gamma=3.125e-08, kernel='rbf')

Start run for:  BayesianRidge()

Start run for:  KNeighborsRegressor(n_neighbors=10)

Start run for:  RandomForestRegressor(max_depth=15, random_state=1)

Start run for:  Pipeline(steps=[('polynomialfeatures', PolynomialFeatures()),
                ('plsregression', PLSRegression(n_components=4))])
Start run for:  Pipeline(steps=[('polynomialfeatures', PolynomialFeatures()),
                ('plsregression', PLSRegression(n_components=8))])
Start run for:  Pipeline(steps=[('polynomialfeatures', PolynomialFeatures()),
                ('plsregression', PLSRegression(n_components=12))])

Start run for:  KernelRidge(alpha=1e-08, gamma=3.125e-08, kernel='rbf')

Start run for:  KNeighborsRegressor(n_neighbors=7)
Start run for:  KNeighborsRegressor(n_neighbors=13)

Start run for:  Pipeline(steps=[('polynomialfeatures', PolynomialFeatures()),
                ('plsregression', PLSRegression(n_components=1))])
Start run for:  Pipeline(steps=[('polynomialfeatures', PolynomialFeatures()),
                ('plsregression', PLSRegression(n_components=5))])
Start run for:  Pipeline(steps=[('polynomialfeatures', PolynomialFeatures()),
                ('plsregression', PLSRegression(n_components=9))])
Start run for:  Pipeline(steps=[('polynomialfeatures', PolynomialFeatures()),
                ('plsregression', PLSRegression(n_components=13))])

Start run for:  DummyRegressor()

Start run for:  KernelRidge(alpha=1e-08, gamma=1.25e-07, kernel='rbf')
Start run for:  KernelRidge(alpha=0.001, gamma=5e-07, kernel='rbf')
Start run for:  KernelRidge(alpha=0.1, gamma=5e-07, kernel='rbf')

Start run for:  KNeighborsRegressor(n_neighbors=4)
Start run for:  KNeighborsRegressor(n_neighbors=16)

Start run for:  Pipeline(steps=[('polynomialfeatures', PolynomialFeatures()),
                ('plsregression', PLSRegression())])
Start run for:  Pipeline(steps=[('polynomialfeatures', PolynomialFeatures()),
                ('plsregression', PLSRegression(n_components=6))])
Start run for:  Pipeline(steps=[('polynomialfeatures', PolynomialFeatures()),
                ('plsregression', PLSRegression(n_components=10))])
Start run for:  Pipeline(steps=[('polynomialfeatures', PolynomialFeatures()),
                ('plsregression', PLSRegression(n_components=14))])

Start run for:  DummyRegressor(strategy='median')

Start run for:  KernelRidge(alpha=1e-08, gamma=5e-07, kernel='rbf')
Start run for:  KernelRidge(alpha=0.001, gamma=1.25e-07, kernel='rbf')
Start run for:  KernelRidge(alpha=0.1, gamma=1.25e-07, kernel='rbf')

Start run for:  KNeighborsRegressor(n_neighbors=1)

Start run for:  RandomForestRegressor(max_depth=15, n_estimators=50, random_state=1)

Start run for:  Pipeline(steps=[('polynomialfeatures', PolynomialFeatures()),
                ('plsregression', PLSRegression(n_components=3))])
Start run for:  Pipeline(steps=[('polynomialfeatures', PolynomialFeatures()),
                ('plsregression', PLSRegression(n_components=7))])
Start run for:  Pipeline(steps=[('polynomialfeatures', PolynomialFeatures()),
                ('plsregression', PLSRegression(n_components=11))])

Start run for:  GaussianProcessRegressor(kernel=1**2 * Matern(length_scale=1, nu=1.5) + WhiteKernel(noise_level=1),
                         random_state=1)
